#TEMPLETE DRIVEN FORM

1) By Default validation is disabled

To enable use ngNativeValidate
<form ngNativeValidate>

2) Define a templete varible for the model

<input id="fullName" required type="text" class="form-control" name="fullName" [(ngModel)]="fullName" #fullNameControl="ngModel">

3) Perform Validation on templete variable

<div class="form-group" [class.has-error]="fullNameControl.invalid">
  	<label for="fullName" class="control-label">Full Name</label>
  	<input  id="fullName" required type="text" class="form-control" name="fullName" [(ngModel)]="fullName" #fullNameControl="ngModel">
  		<span class="help-block" *ngIf="fullNameControl.invalid">
    			Full Name is required
  		</span>
</div>

4) Use the appropiate properties to run validation
	<div class="form-group"[class.has-error]="fullNameControl.invalid && fullNameControl.touched">
  		<label for="fullName" class="control-label">Full Name</label>
  		<input id="fullName" required type="text" class="form-control" name="fullName" [(ngModel)]="fullName" #fullNameControl="ngModel">
  			<span class="help-block" *ngIf="fullNameControl.invalid && fullNameControl.touched">
    				Full Name is required
  			</span>
	</div>

5) we can style a valid field with a different colour

	<div class="form-group"
     [class.has-error]="fullNameControl.invalid && fullNameControl.touched"
     [class.has-success]="fullNameControl.valid">

6) Disable the button

	<button class="btn btn-primary" type="submit" [disabled]="employeeForm.invalid">Save</button>


----------------------------------------------------------------------------------------------

Model Binding in tempete driven form

1) Add Model

 student: Student = {
   name:null,
  }

2)bind ngModel directive on the  input field
	[(ngModel)]="employee.email"


3) Update button

<form #employeeForm="ngForm" (ngSubmit)="saveEmployee(employee)">


saveEmployee(newEmployee: Employee): void {
  console.log(newEmployee);
}
----------------------------------------------------------------------------
4)Email Validation 

<div class="form-group" [class.has-error]="email.invalid && email.touched">

  <label for="email" class="control-label">Email</label>
  <input id="email" required email type="text" class="form-control" name="email"
          [(ngModel)]="employee.email" #email="ngModel">
  <span class="help-block" *ngIf="email.errors?.required && email.touched">
    Email is required
  </span>
  <span class="help-block" *ngIf="email.errors?.email && email.touched">
    Email is Invalid
  </span>
</div>
-----------------------------------------------------------------------------
5) Pattern Validation

<div class="form-group" [class.has-error]="email.invalid && email.touched">
  <label for="email" class="control-label">Email</label>
  <input required pattern="^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
         id="email" type="text" class="form-control" name="email"
         [(ngModel)]="employee.email" #email="ngModel">
  <span class="help-block" *ngIf="email.errors?.required && email.touched">
    Email is required
  </span>
  <span class="help-block" *ngIf="email.errors?.pattern && email.touched">
    Email is Invalid
  </span>
</div>
----------------------------------------------------------------------------
6) Radio Button Validation

<div class="form-group" [class.has-error]="gender.invalid">
  <label class="control-label">Gender</label>
  <div class="form-control">
    <label class="radio-inline">
      <input type="radio" name="gender" required #gender="ngModel"
             value="male" [(ngModel)]="employee.gender"> Male
    </label>
    <label class="radio-inline">
      <input type="radio" name="gender" required #gender="ngModel"
             value="female" [(ngModel)]="employee.gender"> Female
    </label>
  </div>
  <span class="help-block" *ngIf="gender.invalid">
    Gender is required
  </span>
</div>
-----------------------------------------------------------------------------
7) Adding required dynamically

<div class="form-group" [class.has-error]="contactPreference.invalid">
  <label class="control-label">Contact Preference</label>
  <div class="form-control">
    <label class="radio-inline">
      <input type="radio" required #contactPreference="ngModel" name="contactPreference"
              value="email" [(ngModel)]="employee.contactPreference"> Email
    </label>
    <label class="radio-inline">
      <input type="radio" required #contactPreference="ngModel" name="contactPreference"
              value="phone" [(ngModel)]="employee.contactPreference"> Phone
    </label>
  </div>
  <span class="help-block" *ngIf="contactPreference.errors?.required">
      Contact Preference is required
  </span>
</div>


<div class="form-group" [class.has-error]="email.invalid">
  <label for="email" class="control-label">Email</label>
  <input id="email" [required]="contactPreference.value=='email'"
          type="text" class="form-control"
          pattern="^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
          [(ngModel)]="employee.email" #email="ngModel" name="email">
  <span class="help-block" *ngIf="email.errors?.required">
    Email is required
  </span>
  <span class="help-block" *ngIf="email.errors?.pattern && email.touched">
    Email is Invalid
  </span>
</div>


<div class="form-group" [class.has-error]="phoneNumber.invalid">
  <label for="phoneNumber" class="control-label">Phone Number</label>
  <input id="phoneNumber" [required]="contactPreference.value=='phone'"
          #phoneNumber="ngModel" class="form-control" type="text"
          name="phoneNumber" [(ngModel)]="employee.phoneNumber">
  <span class="help-block" *ngIf="phoneNumber.errors?.required">
    Phone Number is required
  </span>
</div>

8) CheckBox Validation

<div class="form-group" [class.has-error]="isActive.invalid && isActive.touched">
  <div class="form-control">
    <label class="checkbox-inline control-label">
      <input type="checkbox" required name="isActive"
             #isActive="ngModel" [(ngModel)]="employee.isActive">
      Is Active
    </label>
  </div>
  <span class="help-block"
        *ngIf="isActive.errors?.required && isActive.touched">
    Is Active is required
  </span>
</div>

If we do not want the checkbox to be checked
[required]="employee.isActive==null"

--------------------------------------------------------------------------
9)Select Validation

<div class="form-group"
     [class.has-error]="department.touched && department.invalid">
  <label for="department" class="control-label">Department</label>
  <select id="department" required #department="ngModel"
          name="department" [(ngModel)]="employee.department"
          class="form-control">
    <option *ngFor="let dept of departments" [value]="dept.id">
      {{dept.name}}
    </option>
  </select>
  <span class="help-block"
        *ngIf="department.touched && department.invalid">
    Department is required
  </span>
</div>


If we want to set a default value
<div class="form-group"
     [class.has-error]="department.touched && department.invalid">
  <label for="department" class="control-label">Department</label>
  <select required #department="ngModel" name="department"
          [(ngModel)]="employee.department" id="department"
          class="form-control">
    <option disabled [ngValue]="null">Select Department</option>
    <option *ngFor="let dept of departments" [value]="dept.id">
      {{dept.name}}
    </option>
  </select>
  <span class="help-block"
        *ngIf="department.touched && department.errors?.required">
    Department is required
  </span>
</div>

-----------------------------------------------------------------------------
